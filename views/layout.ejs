<!DOCTYPE html>
<html>
  <head>
    <title>GLA pilot</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/vendor/bower_components/angular-toastr/dist/angular-toastr.css">
    <!--STYLES END-->

    <!--Added this so the client has access to the csrf tag and it's grabbed first service side on every page -->
    <script type="text/javascript">
      window.SAILS_LOCALS = { _csrf: "<%= _csrf %>" };
    </script>
  </head>
  <body ng-app="AppModule">
  <!-- Creates the navbar -->
  <nav ng-controller="NavbarController" class="navbar navbar-default navbar-inverse" ng-cloak>

    <!-- This creates the mechanism for the collapse button -->
    <button type="button" class="navbar-toggle" data-toggle="collapse" ng-init="navCollapsed = true" ng-click="navCollapsed = !navCollapsed">

      <!-- This controls the number of lines in the image when the nav collapse -->
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
    </button>

    <!-- This is the brand on the left-hand side. -->
    <a class="navbar-brand" href="/#">GLA Pilot</a>
    <div class="collapse navbar-collapse" ng-class="!navCollapsed && 'in'">

      <!-- LOGIN FORM -->
      <form ng-submit="submitLoginForm()" class="navbar-form navbar-right">
        <div ng-hide="user">
          <!-- E M A I L -->
          <div class="form-group">
            <input ng-model="loginForm.email" type="text" placeholder="Email" name="email" class="form-control">
          </div>

          <!-- P A S S W O R D -->
          <div class="form-group">
            <input ng-model="loginForm.password" type="password" placeholder="Password" name="password" class="form-control">
          </div>

          <!-- S U B M I T -->
          <button type="submit" class="btn btn-success">
            <span ng-show="!loginForm.loading">Sign in</span>
            <span ng-show="loginForm.loading" class="fa fa-spinner"></span>
            <span ng-show="loginForm.loading">Signing up...</span>
          </button>
          <a href="/signup" class="btn btn-info">Sign up</a>
          <input type="hidden" name="_csrf" value="<%= _csrf %>" />
        </div>
        <div ng-hide="!user">
          <button  ng-click="logout()" class="btn btn-info">Log out</button>
        </div>
      </form>
    </div>
  </nav>

  <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/vendor/sails.io.js"></script>
    <script src="/vendor/bower_components/jquery/dist/jquery.js"></script>
    <script src="/vendor/bower_components/angular/angular.js"></script>
    <script src="/js/dependencies/compareTo.module.js"></script>
    <script src="/vendor/bower_components/angular-sails/dist/angular-sails.js"></script>
    <script src="/vendor/bower_components/angular-toastr/dist/angular-toastr.tpls.js"></script>
    <script src="/vendor/bower_components/bootstrap/dist/js/bootstrap.js"></script>
    <script src="/vendor/bower_components/lodash/lodash.js"></script>
    <script src="/js/App.Module.js"></script>
    <script src="/js/private/dashboard/dashboard.Controller.js"></script>
    <script src="/js/public/navbar/Navbar.Controller.js"></script>
    <script src="/js/public/signup/Signup.Controller.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
